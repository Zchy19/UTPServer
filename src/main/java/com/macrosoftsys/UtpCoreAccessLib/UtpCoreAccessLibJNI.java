/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.macrosoftsys.UtpCoreAccessLib;

public class UtpCoreAccessLibJNI {
  public final static native long new_LiveAgentVector__SWIG_0();
  public final static native long new_LiveAgentVector__SWIG_1(long jarg1);
  public final static native long LiveAgentVector_size(long jarg1, LiveAgentVector jarg1_);
  public final static native long LiveAgentVector_capacity(long jarg1, LiveAgentVector jarg1_);
  public final static native void LiveAgentVector_reserve(long jarg1, LiveAgentVector jarg1_, long jarg2);
  public final static native boolean LiveAgentVector_isEmpty(long jarg1, LiveAgentVector jarg1_);
  public final static native void LiveAgentVector_clear(long jarg1, LiveAgentVector jarg1_);
  public final static native void LiveAgentVector_add(long jarg1, LiveAgentVector jarg1_, long jarg2, LiveAgent jarg2_);
  public final static native long LiveAgentVector_get(long jarg1, LiveAgentVector jarg1_, int jarg2);
  public final static native void LiveAgentVector_set(long jarg1, LiveAgentVector jarg1_, int jarg2, long jarg3, LiveAgent jarg3_);
  public final static native void delete_LiveAgentVector(long jarg1);
  public final static native long new_SelectedAgentVector__SWIG_0();
  public final static native long new_SelectedAgentVector__SWIG_1(long jarg1);
  public final static native long SelectedAgentVector_size(long jarg1, SelectedAgentVector jarg1_);
  public final static native long SelectedAgentVector_capacity(long jarg1, SelectedAgentVector jarg1_);
  public final static native void SelectedAgentVector_reserve(long jarg1, SelectedAgentVector jarg1_, long jarg2);
  public final static native boolean SelectedAgentVector_isEmpty(long jarg1, SelectedAgentVector jarg1_);
  public final static native void SelectedAgentVector_clear(long jarg1, SelectedAgentVector jarg1_);
  public final static native void SelectedAgentVector_add(long jarg1, SelectedAgentVector jarg1_, long jarg2, SelectedAgent jarg2_);
  public final static native long SelectedAgentVector_get(long jarg1, SelectedAgentVector jarg1_, int jarg2);
  public final static native void SelectedAgentVector_set(long jarg1, SelectedAgentVector jarg1_, int jarg2, long jarg3, SelectedAgent jarg3_);
  public final static native void delete_SelectedAgentVector(long jarg1);
  public final static native long new_DataValueItemVector__SWIG_0();
  public final static native long new_DataValueItemVector__SWIG_1(long jarg1);
  public final static native long DataValueItemVector_size(long jarg1, DataValueItemVector jarg1_);
  public final static native long DataValueItemVector_capacity(long jarg1, DataValueItemVector jarg1_);
  public final static native void DataValueItemVector_reserve(long jarg1, DataValueItemVector jarg1_, long jarg2);
  public final static native boolean DataValueItemVector_isEmpty(long jarg1, DataValueItemVector jarg1_);
  public final static native void DataValueItemVector_clear(long jarg1, DataValueItemVector jarg1_);
  public final static native void DataValueItemVector_add(long jarg1, DataValueItemVector jarg1_, long jarg2, DataValueItem jarg2_);
  public final static native long DataValueItemVector_get(long jarg1, DataValueItemVector jarg1_, int jarg2);
  public final static native void DataValueItemVector_set(long jarg1, DataValueItemVector jarg1_, int jarg2, long jarg3, DataValueItem jarg3_);
  public final static native void delete_DataValueItemVector(long jarg1);
  public final static native long new_AgentFailReasonVector__SWIG_0();
  public final static native long new_AgentFailReasonVector__SWIG_1(long jarg1);
  public final static native long AgentFailReasonVector_size(long jarg1, AgentFailReasonVector jarg1_);
  public final static native long AgentFailReasonVector_capacity(long jarg1, AgentFailReasonVector jarg1_);
  public final static native void AgentFailReasonVector_reserve(long jarg1, AgentFailReasonVector jarg1_, long jarg2);
  public final static native boolean AgentFailReasonVector_isEmpty(long jarg1, AgentFailReasonVector jarg1_);
  public final static native void AgentFailReasonVector_clear(long jarg1, AgentFailReasonVector jarg1_);
  public final static native void AgentFailReasonVector_add(long jarg1, AgentFailReasonVector jarg1_, long jarg2, AgentFailReason jarg2_);
  public final static native long AgentFailReasonVector_get(long jarg1, AgentFailReasonVector jarg1_, int jarg2);
  public final static native void AgentFailReasonVector_set(long jarg1, AgentFailReasonVector jarg1_, int jarg2, long jarg3, AgentFailReason jarg3_);
  public final static native void delete_AgentFailReasonVector(long jarg1);
  public final static native void initUtpCoreAccess();
  public final static native void releaseUtpCoreAccess();
  public final static native long new_BoolInvokeResult();
  public final static native void delete_BoolInvokeResult(long jarg1);
  public final static native boolean BoolInvokeResult_getBoolResult(long jarg1, BoolInvokeResult jarg1_);
  public final static native long new_AgentFailReason();
  public final static native String AgentFailReason_getAgentName(long jarg1, AgentFailReason jarg1_);
  public final static native String AgentFailReason_getFailReason(long jarg1, AgentFailReason jarg1_);
  public final static native void delete_AgentFailReason(long jarg1);
  public final static native long new_ExecuteInvokeResult();
  public final static native void delete_ExecuteInvokeResult(long jarg1);
  public final static native long ExecuteInvokeResult_getFailAgentCount(long jarg1, ExecuteInvokeResult jarg1_);
  public final static native boolean ExecuteInvokeResult_getAgentFailReason(long jarg1, ExecuteInvokeResult jarg1_, long jarg2, long jarg3, AgentFailReason jarg3_);
  public final static native long new_AnalyzeInvokeResult();
  public final static native void delete_AnalyzeInvokeResult(long jarg1);
  public final static native String AnalyzeInvokeResult_getScriptId(long jarg1, AnalyzeInvokeResult jarg1_);
  public final static native long AnalyzeInvokeResult_getIndex(long jarg1, AnalyzeInvokeResult jarg1_);
  public final static native String AnalyzeInvokeResult_getErrMsg(long jarg1, AnalyzeInvokeResult jarg1_);
  public final static native String ScriptAgent_getAgentName(long jarg1, ScriptAgent jarg1_);
  public final static native String ScriptAgent_getAgentType(long jarg1, ScriptAgent jarg1_);
  public final static native long new_ScriptAgent();
  public final static native void delete_ScriptAgent(long jarg1);
  public final static native long new_ScriptAgentVector();
  public final static native void delete_ScriptAgentVector(long jarg1);
  public final static native void ScriptAgentVector_add(long jarg1, ScriptAgentVector jarg1_, long jarg2, ScriptAgent jarg2_);
  public final static native int ScriptAgentVector_size(long jarg1, ScriptAgentVector jarg1_);
  public final static native long ScriptAgentVector_get(long jarg1, ScriptAgentVector jarg1_, int jarg2);
  public final static native String LiveAgent_getAgentId(long jarg1, LiveAgent jarg1_);
  public final static native String LiveAgent_getAgentType(long jarg1, LiveAgent jarg1_);
  public final static native String LiveAgent_getAgentName(long jarg1, LiveAgent jarg1_);
  public final static native String LiveAgent_getAgentDesc(long jarg1, LiveAgent jarg1_);
  public final static native long new_LiveAgent();
  public final static native void delete_LiveAgent(long jarg1);
  public final static native long new_AgentLiveList();
  public final static native void delete_AgentLiveList(long jarg1);
  public final static native String AgentLiveList_getTestObjectId(long jarg1, AgentLiveList jarg1_);
  public final static native long AgentLiveList_getLiveAgents(long jarg1, AgentLiveList jarg1_);
  public final static native long new_AgentLiveListVector();
  public final static native void delete_AgentLiveListVector(long jarg1);
  public final static native void AgentLiveListVector_add(long jarg1, AgentLiveListVector jarg1_, long jarg2, AgentLiveList jarg2_);
  public final static native int AgentLiveListVector_size(long jarg1, AgentLiveListVector jarg1_);
  public final static native long AgentLiveListVector_get(long jarg1, AgentLiveListVector jarg1_, int jarg2);
  public final static native String SelectedAgent_getScriptAgentName(long jarg1, SelectedAgent jarg1_);
  public final static native String SelectedAgent_getAgentId(long jarg1, SelectedAgent jarg1_);
  public final static native void SelectedAgent_setScriptAgentName(long jarg1, SelectedAgent jarg1_, String jarg2);
  public final static native void SelectedAgent_setAgentId(long jarg1, SelectedAgent jarg1_, String jarg2);
  public final static native long new_SelectedAgent();
  public final static native void delete_SelectedAgent(long jarg1);
  public final static native String DataValueItem_value_get(long jarg1, DataValueItem jarg1_);
  public final static native long new_DataValueItem();
  public final static native void delete_DataValueItem(long jarg1);
  public final static native String MonitoredData_getDataName(long jarg1, MonitoredData jarg1_);
  public final static native int MonitoredData_getDataType(long jarg1, MonitoredData jarg1_);
  public final static native long MonitoredData_getDataValue(long jarg1, MonitoredData jarg1_);
  public final static native long new_MonitoredData();
  public final static native void delete_MonitoredData(long jarg1);
  public final static native void delete_ExecProgItem(long jarg1);
  public final static native void ExecProgItem_notifType_set(long jarg1, ExecProgItem jarg1_, int jarg2);
  public final static native int ExecProgItem_notifType_get(long jarg1, ExecProgItem jarg1_);
  public final static native void ExecProgItem_notifContent_set(long jarg1, ExecProgItem jarg1_, String[] jarg2);
  public final static native String[] ExecProgItem_notifContent_get(long jarg1, ExecProgItem jarg1_);
  public final static native long new_ExecProgItem();
  public final static native long new_ScriptCmd();
  public final static native void delete_ScriptCmd(long jarg1);
  public final static native void ScriptCmd_addCmdField(long jarg1, ScriptCmd jarg1_, String jarg2);
  public final static native long new_ScriptContent();
  public final static native void delete_ScriptContent(long jarg1);
  public final static native void ScriptContent_addScriptCmd(long jarg1, ScriptContent jarg1_, long jarg2, ScriptCmd jarg2_);
  public final static native long new_EngineConfiguration();
  public final static native void delete_EngineConfiguration(long jarg1);
  public final static native void EngineConfiguration_addEngineConfigItem(long jarg1, EngineConfiguration jarg1_, String jarg2, String jarg3);
  public final static native void EngineConfiguration_addAgent(long jarg1, EngineConfiguration jarg1_, String jarg2, String jarg3);
  public final static native void EngineConfiguration_addAgentNotifyScript(long jarg1, EngineConfiguration jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void EngineConfiguration_addAgentConfigItem(long jarg1, EngineConfiguration jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void EngineConfiguration_addScript(long jarg1, EngineConfiguration jarg1_, String jarg2, String[] jarg3);
  public final static native void EngineConfiguration_addStructuredScript(long jarg1, EngineConfiguration jarg1_, String jarg2, long jarg3, ScriptContent jarg3_);
  public final static native void EngineConfiguration_addProgNotiType(long jarg1, EngineConfiguration jarg1_, int jarg2);
  public final static native void EngineConfiguration_addGlobalMacro(long jarg1, EngineConfiguration jarg1_, String jarg2, String jarg3);
  public final static native void delete_IMonitorDataListener(long jarg1);
  public final static native void IMonitorDataListener_dataChanged(long jarg1, IMonitorDataListener jarg1_, long jarg2, MonitoredData jarg2_, long jarg3, String jarg4);
  public final static native long new_IMonitorDataListener();
  public final static native void IMonitorDataListener_director_connect(IMonitorDataListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IMonitorDataListener_change_ownership(IMonitorDataListener obj, long cptr, boolean take_or_release);
  public final static native void delete_IExecProgListener(long jarg1);
  public final static native void IExecProgListener_update(long jarg1, IExecProgListener jarg1_, long jarg2, ExecProgItem jarg2_, long jarg3);
  public final static native long new_IExecProgListener();
  public final static native void IExecProgListener_director_connect(IExecProgListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IExecProgListener_change_ownership(IExecProgListener obj, long cptr, boolean take_or_release);
  public final static native void delete_ICommuExceptionListener(long jarg1);
  public final static native void ICommuExceptionListener_commuExceptionNotify(long jarg1, ICommuExceptionListener jarg1_, int jarg2, long jarg3);
  public final static native long new_ICommuExceptionListener();
  public final static native void ICommuExceptionListener_director_connect(ICommuExceptionListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICommuExceptionListener_change_ownership(ICommuExceptionListener obj, long cptr, boolean take_or_release);
  public final static native void delete_IExecStatusListener(long jarg1);
  public final static native void IExecStatusListener_execStatusChanged(long jarg1, IExecStatusListener jarg1_, int jarg2, long jarg3);
  public final static native long new_IExecStatusListener();
  public final static native void IExecStatusListener_director_connect(IExecStatusListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IExecStatusListener_change_ownership(IExecStatusListener obj, long cptr, boolean take_or_release);
  public final static native void delete_IAsyncCallResponseListener(long jarg1);
  public final static native void IAsyncCallResponseListener_initEngineResponse(long jarg1, IAsyncCallResponseListener jarg1_, long jarg2, BoolInvokeResult jarg2_, long jarg3);
  public final static native void IAsyncCallResponseListener_configEngineResponse(long jarg1, IAsyncCallResponseListener jarg1_, long jarg2, BoolInvokeResult jarg2_, long jarg3);
  public final static native void IAsyncCallResponseListener_analyzeScriptResponse(long jarg1, IAsyncCallResponseListener jarg1_, long jarg2, AnalyzeInvokeResult jarg2_, long jarg3);
  public final static native void IAsyncCallResponseListener_getAvailableAgentsResponse(long jarg1, IAsyncCallResponseListener jarg1_, long jarg2, ScriptAgentVector jarg2_, long jarg3, AgentLiveListVector jarg3_, long jarg4);
  public final static native void IAsyncCallResponseListener_startExecutionResponse(long jarg1, IAsyncCallResponseListener jarg1_, long jarg2, ExecuteInvokeResult jarg2_, long jarg3);
  public final static native long new_IAsyncCallResponseListener();
  public final static native void IAsyncCallResponseListener_director_connect(IAsyncCallResponseListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IAsyncCallResponseListener_change_ownership(IAsyncCallResponseListener obj, long cptr, boolean take_or_release);
  public final static native long new_UtpEngine();
  public final static native void delete_UtpEngine(long jarg1);
  public final static native boolean UtpEngine_initEngineAsClient(long jarg1, UtpEngine jarg1_, long jarg2, String jarg3);
  public final static native boolean UtpEngine_initEngineReq(long jarg1, UtpEngine jarg1_, String jarg2, long jarg3);
  public final static native boolean UtpEngine_configEngineReq(long jarg1, UtpEngine jarg1_, long jarg2, EngineConfiguration jarg2_);
  public final static native boolean UtpEngine_analyzeScriptReq(long jarg1, UtpEngine jarg1_, String jarg2);
  public final static native boolean UtpEngine_getAvailableAgentsReq(long jarg1, UtpEngine jarg1_, String jarg2);
  public final static native boolean UtpEngine_startExecutionReq(long jarg1, UtpEngine jarg1_, long jarg2, SelectedAgentVector jarg2_);
  public final static native boolean UtpEngine_stopExecution(long jarg1, UtpEngine jarg1_);
  public final static native boolean UtpEngine_pauseExecution(long jarg1, UtpEngine jarg1_);
  public final static native boolean UtpEngine_resumeExecution(long jarg1, UtpEngine jarg1_);
  public final static native boolean UtpEngine_singleStepExecution(long jarg1, UtpEngine jarg1_);
  public final static native void UtpEngine_setAsyncCallResponseListener(long jarg1, UtpEngine jarg1_, long jarg2, IAsyncCallResponseListener jarg2_);
  public final static native void UtpEngine_setMonitorDataListener(long jarg1, UtpEngine jarg1_, long jarg2, IMonitorDataListener jarg2_);
  public final static native void UtpEngine_setExecProgListener(long jarg1, UtpEngine jarg1_, long jarg2, IExecProgListener jarg2_);
  public final static native void UtpEngine_setExecStatusListener(long jarg1, UtpEngine jarg1_, long jarg2, IExecStatusListener jarg2_);
  public final static native void UtpEngine_setCommuExceptionListener(long jarg1, UtpEngine jarg1_, long jarg2, ICommuExceptionListener jarg2_);
  public final static native long UtpEngine_getEngineSessionId(long jarg1, UtpEngine jarg1_);
  public final static native boolean UtpEngine_releaseEngine(long jarg1, UtpEngine jarg1_);
  public final static native long ExecuteInvokeResult_SWIGUpcast(long jarg1);
  public final static native long AnalyzeInvokeResult_SWIGUpcast(long jarg1);

  public static void SwigDirector_IMonitorDataListener_dataChanged(IMonitorDataListener self, long data, long engineSessionId, String timestamp) {
    self.dataChanged(new MonitoredData(data, false), engineSessionId, timestamp);
  }
  public static void SwigDirector_IExecProgListener_update(IExecProgListener self, long progNotify, long engineSessionId) {
    self.update(new ExecProgItem(progNotify, false), engineSessionId);
  }
  public static void SwigDirector_ICommuExceptionListener_commuExceptionNotify(ICommuExceptionListener self, int exception, long engineSessionId) {
    self.commuExceptionNotify(CommuExceptionType.swigToEnum(exception), engineSessionId);
  }
  public static void SwigDirector_IExecStatusListener_execStatusChanged(IExecStatusListener self, int newStatus, long engineSessionId) {
    self.execStatusChanged(ExecStatus.swigToEnum(newStatus), engineSessionId);
  }
  public static void SwigDirector_IAsyncCallResponseListener_initEngineResponse(IAsyncCallResponseListener self, long result, long engineSessionId) {
    self.initEngineResponse(new BoolInvokeResult(result, false), engineSessionId);
  }
  public static void SwigDirector_IAsyncCallResponseListener_configEngineResponse(IAsyncCallResponseListener self, long result, long engineSessionId) {
    self.configEngineResponse(new BoolInvokeResult(result, false), engineSessionId);
  }
  public static void SwigDirector_IAsyncCallResponseListener_analyzeScriptResponse(IAsyncCallResponseListener self, long result, long engineSessionId) {
    self.analyzeScriptResponse(new AnalyzeInvokeResult(result, false), engineSessionId);
  }
  public static void SwigDirector_IAsyncCallResponseListener_getAvailableAgentsResponse(IAsyncCallResponseListener self, long scriptAgents, long liveAgents, long engineSessionId) {
    self.getAvailableAgentsResponse(new ScriptAgentVector(scriptAgents, false), new AgentLiveListVector(liveAgents, false), engineSessionId);
  }
  public static void SwigDirector_IAsyncCallResponseListener_startExecutionResponse(IAsyncCallResponseListener self, long result, long engineSessionId) {
    self.startExecutionResponse(new ExecuteInvokeResult(result, false), engineSessionId);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
